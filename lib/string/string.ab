import * from "std"

pub fun to_string(value): Text {
    if {
        value is Text: return "{value}"
        value is Num: {
            return unsafe $ echo "{value}" $
            }
        value is [Text] or value is [Num]: return  unsafe $ IFS="" ; echo "\$\{{nameof value}[*]}" $
    }
    return ""
}

pub fun _floor_(value:Num): Num {
    return unsafe parse(replace(to_string(value), ".*", ""))
}

// negative index handling ?
pub fun slice(string: Text, index:Num, length:Num): Text {
    index = _floor_(index)
    length  = _floor_(length)
    return unsafe $ echo "\$\{string:index:length}" $
}

// negative index handling ?
pub fun char_at(string: Text, index:Num): Text {
    return slice(string, index, 1)
}

// negative index handling ?
pub fun char_set(string: Text, index:Num, char:Text): Text {
    if {
        len(char) == 0 or index < 0: return string
        len(string) == 0: return char
    }
 
    char = char_at(char, 0)
    index = _floor_(index) 
    let last = slice(string, index+1, len(string)-index )
    return slice(string, 0, index) + char + last
}

pub fun repeat(string: Text, value:Num): Text {
    let i = 0
    let ret = ""
    if value < 0: return ret
    loop {
        if i == _floor_(value):
            break
        i += 1
        ret += string
    }
    return ret
}

pub fun rpad(string: Text, pad:Text, value:Num): Text {
    if len(string) >= value: return string
    if len(pad) > 1: pad = char_at(pad,0)
    let adjoin = value - len(string)
    string = string + repeat(pad, adjoin)
    return string
}

pub fun lpad(string: Text, pad:Text, value:Num): Text {
    if len(string) >= value: return string
    if len(pad) > 1: pad = char_at(pad,0)
    let adjoin = value - len(string)
    string = repeat(pad, adjoin) + string
    return string
}

pub fun zfill(string: Text, value:Num): Text {
    return lpad(string, "0", value)
}

pub fun reverse(string:Text): Text {
	return unsafe $ echo "{string}" | rev $
}

pub fun in_string(string: Text, value: Text): Bool {
    $ echo "{string}" | grep -q "{value}" $ failed: return false
    return true
}

pub fun index_in_string(string: Text, value: Text): Num {
    if string == "" or value == "": return -1
    let index = unsafe $ echo "{string}" | awk -v search="{value}" '\{print index(\$0, search)}' $
    return unsafe parse(index)-1
}

pub fun capitalize(string: Text): Text {
    let first_char= char_at(string, 0)
    let rest = slice(string,1, len(string))
    return upper(first_char) + rest
}

pub fun squeeze(string: Text): Text {
    return unsafe  $ echo {string} | tr '\t' ' ' | tr -s ' '  $
}

// removes WS should it?
pub fun title(string: Text): Text {
    string = replace(string,"\t"," ")
    let word_list = words(string)
    let ret = ""
    loop word in word_list {
        ret += capitalize(lower(word))+ " "
    }
    return trim_right(ret)
}

// This function takes a string as input and generates a URL-friendly slug by 
// removing special characters, replacing spaces with hyphens, and converting 
// all characters to lowercase. 
pub fun to_url(string: Text): Text {
    string = squeeze(string)
    let url = unsafe $ echo "{string}" | tr -cd '[:alnum:][:space:]' | tr '[:space:]' '-' | tr '[:upper:]' '[:lower:]' | sed 's/-\$//' $
    return url
}

pub fun remove_puncation(string: Text): Text {
    return unsafe $ echo "{string}" | tr -d '[:punct:]' $
}

pub fun sanitize(string: Text, allowed: Text): Text {
    return unsafe $ echo "{string}" | sed "s/[^[:alnum:]{allowed}]//g" $
}

pub fun strip_html_tags(string: Text): Text {
    return replace_regex(string,"<[^>]*>","")
}

pub fun generate_password(length: Num): Text {
    if length < 1: return ""
    return unsafe $ tr -dc 'A-Za-z0-9!@#\$%^&*()_+-=' < /dev/urandom | head -c "{length}" $
}
